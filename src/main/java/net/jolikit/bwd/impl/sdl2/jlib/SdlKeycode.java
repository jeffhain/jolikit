/*
 * Copyright 2019 Jeff Hain
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.jolikit.bwd.impl.sdl2.jlib;

import net.jolikit.bwd.impl.utils.basics.IntValuedHelper;
import net.jolikit.bwd.impl.utils.basics.IntValuedHelper.InterfaceIntValued;

/**
 * "typedef Sint32 SDL_Keycode;"
 * 
 * \brief The SDL virtual key representation.
 *
 * Values of this type are used to represent keyboard keys using the current
 * layout of the keyboard.  These values include Unicode values representing
 * the unmodified character that would be generated by pressing the key, or
 * an SDLK_* constant for those keys that do not generate characters.
 */
public enum SdlKeycode implements InterfaceIntValued {
    SDLK_UNKNOWN(0),
    //
    SDLK_RETURN('\r'),
    SDLK_ESCAPE('\033'),
    SDLK_BACKSPACE('\b'),
    SDLK_TAB('\t'),
    SDLK_SPACE(' '),
    SDLK_EXCLAIM('!'),
    SDLK_QUOTEDBL('"'),
    SDLK_HASH('#'),
    SDLK_PERCENT('%'),
    SDLK_DOLLAR('$'),
    SDLK_AMPERSAND('&'),
    SDLK_QUOTE('\''),
    SDLK_LEFTPAREN('('),
    SDLK_RIGHTPAREN(')'),
    SDLK_ASTERISK('*'),
    SDLK_PLUS('+'),
    SDLK_COMMA(','),
    SDLK_MINUS('-'),
    SDLK_PERIOD('.'),
    SDLK_SLASH('/'),
    SDLK_0('0'),
    SDLK_1('1'),
    SDLK_2('2'),
    SDLK_3('3'),
    SDLK_4('4'),
    SDLK_5('5'),
    SDLK_6('6'),
    SDLK_7('7'),
    SDLK_8('8'),
    SDLK_9('9'),
    SDLK_COLON(':'),
    SDLK_SEMICOLON(';'),
    SDLK_LESS('<'),
    SDLK_EQUALS('='),
    SDLK_GREATER('>'),
    SDLK_QUESTION('?'),
    SDLK_AT('@'),
    /*
     * Skip uppercase letters
     */
    SDLK_LEFTBRACKET('|'),
    SDLK_BACKSLASH('\\'),
    SDLK_RIGHTBRACKET(']'),
    SDLK_CARET('^'),
    SDLK_UNDERSCORE('_'),
    SDLK_BACKQUOTE('`'),
    //
    SDLK_a('a'),
    SDLK_b('b'),
    SDLK_c('c'),
    SDLK_d('d'),
    SDLK_e('e'),
    SDLK_f('f'),
    SDLK_g('g'),
    SDLK_h('h'),
    SDLK_i('i'),
    SDLK_j('j'),
    SDLK_k('k'),
    SDLK_l('l'),
    SDLK_m('m'),
    SDLK_n('n'),
    SDLK_o('o'),
    SDLK_p('p'),
    SDLK_q('q'),
    SDLK_r('r'),
    SDLK_s('s'),
    SDLK_t('t'),
    SDLK_u('u'),
    SDLK_v('v'),
    SDLK_w('w'),
    SDLK_x('x'),
    SDLK_y('y'),
    SDLK_z('z'),
    //
    SDLK_CAPSLOCK(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CAPSLOCK.intValue())),
    //
    SDLK_F1(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F1.intValue())),
    SDLK_F2(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F2.intValue())),
    SDLK_F3(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F3.intValue())),
    SDLK_F4(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F4.intValue())),
    SDLK_F5(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F5.intValue())),
    SDLK_F6(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F6.intValue())),
    SDLK_F7(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F7.intValue())),
    SDLK_F8(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F8.intValue())),
    SDLK_F9(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F9.intValue())),
    SDLK_F10(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F10.intValue())),
    SDLK_F11(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F11.intValue())),
    SDLK_F12(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F12.intValue())),
    //
    SDLK_PRINTSCREEN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_PRINTSCREEN.intValue())),
    SDLK_SCROLLLOCK(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_SCROLLLOCK.intValue())),
    SDLK_PAUSE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_PAUSE.intValue())),
    SDLK_INSERT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_INSERT.intValue())),
    SDLK_HOME(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_HOME.intValue())),
    SDLK_PAGEUP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_PAGEUP.intValue())),
    SDLK_DELETE('\177'),
    SDLK_END(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_END.intValue())),
    SDLK_PAGEDOWN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_PAGEDOWN.intValue())),
    SDLK_RIGHT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_RIGHT.intValue())),
    SDLK_LEFT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_LEFT.intValue())),
    SDLK_DOWN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_DOWN.intValue())),
    SDLK_UP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_UP.intValue())),
    //
    SDLK_NUMLOCKCLEAR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_NUMLOCKCLEAR.intValue())),
    SDLK_KP_DIVIDE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_DIVIDE.intValue())),
    SDLK_KP_MULTIPLY(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MULTIPLY.intValue())),
    SDLK_KP_MINUS(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MINUS.intValue())),
    SDLK_KP_PLUS(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_PLUS.intValue())),
    SDLK_KP_ENTER(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_ENTER.intValue())),
    SDLK_KP_1(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_1.intValue())),
    SDLK_KP_2(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_2.intValue())),
    SDLK_KP_3(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_3.intValue())),
    SDLK_KP_4(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_4.intValue())),
    SDLK_KP_5(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_5.intValue())),
    SDLK_KP_6(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_6.intValue())),
    SDLK_KP_7(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_7.intValue())),
    SDLK_KP_8(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_8.intValue())),
    SDLK_KP_9(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_9.intValue())),
    SDLK_KP_0(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_0.intValue())),
    SDLK_KP_PERIOD(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_PERIOD.intValue())),
    //
    SDLK_APPLICATION(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_APPLICATION.intValue())),
    SDLK_POWER(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_POWER.intValue())),
    SDLK_KP_EQUALS(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_EQUALS.intValue())),
    SDLK_F13(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F13.intValue())),
    SDLK_F14(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F14.intValue())),
    SDLK_F15(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F15.intValue())),
    SDLK_F16(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F16.intValue())),
    SDLK_F17(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F17.intValue())),
    SDLK_F18(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F18.intValue())),
    SDLK_F19(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F19.intValue())),
    SDLK_F20(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F20.intValue())),
    SDLK_F21(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F21.intValue())),
    SDLK_F22(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F22.intValue())),
    SDLK_F23(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F23.intValue())),
    SDLK_F24(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_F24.intValue())),
    SDLK_EXECUTE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_EXECUTE.intValue())),
    SDLK_HELP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_HELP.intValue())),
    SDLK_MENU(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_MENU.intValue())),
    SDLK_SELECT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_SELECT.intValue())),
    SDLK_STOP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_STOP.intValue())),
    SDLK_AGAIN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AGAIN.intValue())),
    SDLK_UNDO(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_UNDO.intValue())),
    SDLK_CUT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CUT.intValue())),
    SDLK_COPY(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_COPY.intValue())),
    SDLK_PASTE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_PASTE.intValue())),
    SDLK_FIND(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_FIND.intValue())),
    SDLK_MUTE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_MUTE.intValue())),
    SDLK_VOLUMEUP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_VOLUMEUP.intValue())),
    SDLK_VOLUMEDOWN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_VOLUMEDOWN.intValue())),
    SDLK_KP_COMMA(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_COMMA.intValue())),
    SDLK_KP_EQUALSAS400(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_EQUALSAS400.intValue())),
    //
    SDLK_ALTERASE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_ALTERASE.intValue())),
    SDLK_SYSREQ(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_SYSREQ.intValue())),
    SDLK_CANCEL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CANCEL.intValue())),
    SDLK_CLEAR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CLEAR.intValue())),
    SDLK_PRIOR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_PRIOR.intValue())),
    SDLK_RETURN2(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_RETURN2.intValue())),
    SDLK_SEPARATOR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_SEPARATOR.intValue())),
    SDLK_OUT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_OUT.intValue())),
    SDLK_OPER(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_OPER.intValue())),
    SDLK_CLEARAGAIN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CLEARAGAIN.intValue())),
    SDLK_CRSEL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CRSEL.intValue())),
    SDLK_EXSEL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_EXSEL.intValue())),
    //
    SDLK_KP_00(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_00.intValue())),
    SDLK_KP_000(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_000.intValue())),
    SDLK_THOUSANDSSEPARATOR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_THOUSANDSSEPARATOR.intValue())),
    SDLK_DECIMALSEPARATOR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_DECIMALSEPARATOR.intValue())),
    SDLK_CURRENCYUNIT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CURRENCYUNIT.intValue())),
    SDLK_CURRENCYSUBUNIT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CURRENCYSUBUNIT.intValue())),
    SDLK_KP_LEFTPAREN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_LEFTPAREN.intValue())),
    SDLK_KP_RIGHTPAREN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_RIGHTPAREN.intValue())),
    SDLK_KP_LEFTBRACE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_LEFTBRACE.intValue())),
    SDLK_KP_RIGHTBRACE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_RIGHTBRACE.intValue())),
    SDLK_KP_TAB(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_TAB.intValue())),
    SDLK_KP_BACKSPACE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_BACKSPACE.intValue())),
    SDLK_KP_A(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_A.intValue())),
    SDLK_KP_B(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_B.intValue())),
    SDLK_KP_C(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_C.intValue())),
    SDLK_KP_D(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_D.intValue())),
    SDLK_KP_E(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_E.intValue())),
    SDLK_KP_F(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_F.intValue())),
    SDLK_KP_XOR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_XOR.intValue())),
    SDLK_KP_POWER(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_POWER.intValue())),
    SDLK_KP_PERCENT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_PERCENT.intValue())),
    SDLK_KP_LESS(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_LESS.intValue())),
    SDLK_KP_GREATER(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_GREATER.intValue())),
    SDLK_KP_AMPERSAND(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_AMPERSAND.intValue())),
    SDLK_KP_DBLAMPERSAND(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_DBLAMPERSAND.intValue())),
    SDLK_KP_VERTICALBAR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_VERTICALBAR.intValue())),
    SDLK_KP_DBLVERTICALBAR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_DBLVERTICALBAR.intValue())),
    SDLK_KP_COLON(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_COLON.intValue())),
    SDLK_KP_HASH(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_HASH.intValue())),
    SDLK_KP_SPACE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_SPACE.intValue())),
    SDLK_KP_AT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_AT.intValue())),
    SDLK_KP_EXCLAM(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_EXCLAM.intValue())),
    SDLK_KP_MEMSTORE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMSTORE.intValue())),
    SDLK_KP_MEMRECALL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMRECALL.intValue())),
    SDLK_KP_MEMCLEAR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMCLEAR.intValue())),
    SDLK_KP_MEMADD(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMADD.intValue())),
    SDLK_KP_MEMSUBTRACT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMSUBTRACT.intValue())),
    SDLK_KP_MEMMULTIPLY(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMMULTIPLY.intValue())),
    SDLK_KP_MEMDIVIDE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_MEMDIVIDE.intValue())),
    SDLK_KP_PLUSMINUS(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_PLUSMINUS.intValue())),
    SDLK_KP_CLEAR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_CLEAR.intValue())),
    SDLK_KP_CLEARENTRY(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_CLEARENTRY.intValue())),
    SDLK_KP_BINARY(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_BINARY.intValue())),
    SDLK_KP_OCTAL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_OCTAL.intValue())),
    SDLK_KP_DECIMAL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_DECIMAL.intValue())),
    SDLK_KP_HEXADECIMAL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KP_HEXADECIMAL.intValue())),
    //
    SDLK_LCTRL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_LCTRL.intValue())),
    SDLK_LSHIFT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_LSHIFT.intValue())),
    SDLK_LALT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_LALT.intValue())),
    SDLK_LGUI(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_LGUI.intValue())),
    SDLK_RCTRL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_RCTRL.intValue())),
    SDLK_RSHIFT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_RSHIFT.intValue())),
    SDLK_RALT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_RALT.intValue())),
    SDLK_RGUI(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_RGUI.intValue())),
    //
    SDLK_MODE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_MODE.intValue())),
    //
    SDLK_AUDIONEXT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AUDIONEXT.intValue())),
    SDLK_AUDIOPREV(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AUDIOPREV.intValue())),
    SDLK_AUDIOSTOP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AUDIOSTOP.intValue())),
    SDLK_AUDIOPLAY(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AUDIOPLAY.intValue())),
    SDLK_AUDIOMUTE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AUDIOMUTE.intValue())),
    SDLK_MEDIASELECT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_MEDIASELECT.intValue())),
    SDLK_WWW(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_WWW.intValue())),
    SDLK_MAIL(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_MAIL.intValue())),
    SDLK_CALCULATOR(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_CALCULATOR.intValue())),
    SDLK_COMPUTER(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_COMPUTER.intValue())),
    SDLK_AC_SEARCH(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_SEARCH.intValue())),
    SDLK_AC_HOME(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_HOME.intValue())),
    SDLK_AC_BACK(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_BACK.intValue())),
    SDLK_AC_FORWARD(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_FORWARD.intValue())),
    SDLK_AC_STOP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_STOP.intValue())),
    SDLK_AC_REFRESH(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_REFRESH.intValue())),
    SDLK_AC_BOOKMARKS(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_AC_BOOKMARKS.intValue())),
    //
    SDLK_BRIGHTNESSDOWN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_BRIGHTNESSDOWN.intValue())),
    SDLK_BRIGHTNESSUP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_BRIGHTNESSUP.intValue())),
    SDLK_DISPLAYSWITCH(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_DISPLAYSWITCH.intValue())),
    SDLK_KBDILLUMTOGGLE(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KBDILLUMTOGGLE.intValue())),
    SDLK_KBDILLUMDOWN(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KBDILLUMDOWN.intValue())),
    SDLK_KBDILLUMUP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_KBDILLUMUP.intValue())),
    SDLK_EJECT(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_EJECT.intValue())),
    SDLK_SLEEP(SdlStatics.SDL_SCANCODE_TO_KEYCODE(SdlScancode.SDL_SCANCODE_SLEEP.intValue()));
    
    private static final IntValuedHelper<SdlKeycode> HELPER =
            new IntValuedHelper<SdlKeycode>(SdlKeycode.values());

    private final int intValue;

    private SdlKeycode(int intValue) {
        this.intValue = intValue;
    }
    
    @Override
    public int intValue() {
        return this.intValue;
    }
    
    /**
     * @param intValue An int value.
     * @return The corresponding instance, or null if none.
     */
    public static SdlKeycode valueOf(int intValue) {
        return HELPER.instanceOf(intValue);
    }
}

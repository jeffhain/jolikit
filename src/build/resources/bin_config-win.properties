#
# Config used for Windows OS.
#

JAVA_PATH=C:/Program Files/Java/jdk1.8.0_144/bin/java

# Directory where classes (or jars) of this project,
# automatically compiled (typically by an IDE),
# can be found.
# We prefer to use automatic compilation from an IDE,
# than the overhead of ensuring a fresh compilation
# before each test or sample launch.
AUTO_COMP_DIR_PATH=ideclasses

#
# Common classpath.
# With ";" separator (really, whatever the OS).
#

# Jadecy (https://github.com/jeffhain/jadecy, v2.0)
# and JUnit (https://mvnrepository.com/artifact/junit/junit/3.8.1)
# needed for build and tests.
CLASSPATH_COMMON=\
lib/jadecy.jar\
;lib/junit.jar

#
# Classpaths for specific libraries.
# With ";" separator (really, whatever the OS).
#

# Can be useful if JavaFX is not in your JDK.
CLASSPATH_JFX=

# Installation info: binaries can be found in:
# http://download.eclipse.org/eclipse/downloads/drops4/R-4.7-201706120950/download.php?dropFile=swt-4.7-win32-win32-x86_64.zip
CLASSPATH_SWT=lib_bindings/swt_4_7/win/swt.jar

# Installation info: binaries can be found in:
# https://github.com/LWJGL/lwjgl3/releases/download/3.1.2/lwjgl-3.1.2.zip
# jemalloc is not mandatory, but LWJGL devs like to use jemalloc.
CLASSPATH_LWJGL3=\
lib_bindings/lwjgl_3_1_2_b29/main/lwjgl.jar\
;lib_bindings/lwjgl_3_1_2_b29/main/lwjgl-natives-windows.jar\
;lib_bindings/lwjgl_3_1_2_b29/glfw/lwjgl-glfw.jar\
;lib_bindings/lwjgl_3_1_2_b29/glfw/lwjgl-glfw-natives-windows.jar\
;lib_bindings/lwjgl_3_1_2_b29/opengl/lwjgl-opengl.jar\
;lib_bindings/lwjgl_3_1_2_b29/opengl/lwjgl-opengl-natives-windows.jar\
;lib_bindings/lwjgl_3_1_2_b29/stb/lwjgl-stb.jar\
;lib_bindings/lwjgl_3_1_2_b29/stb/lwjgl-stb-natives-windows.jar\
;lib_bindings/lwjgl_3_1_2_b29/jemalloc/lwjgl-jemalloc.jar\
;lib_bindings/lwjgl_3_1_2_b29/jemalloc/lwjgl-jemalloc-natives-windows.jar

# Installation info: binaries can be found in:
# - https://jogamp.org/deployment/autobuilds/master/gluegen-b903-903/gluegen-2.4-b903-20151116-windows-amd64.7z
#   (for gluegen)
# - https://jogamp.org/deployment/autobuilds/master/jogl-b1473-1473/jogl-2.4-b1473-20151117-windows-amd64.7z
#   (for jogl)
CLASSPATH_JOGL=\
lib_bindings/gluegen_2_4_b903/win64/gluegen-rt.jar\
;lib_bindings/gluegen_2_4_b903/win64/gluegen-rt-natives-windows-amd64.jar\
;lib_bindings/jogl_2_4_b1473/win64/jogl-all-noawt.jar\
;lib_bindings/jogl_2_4_b1473/win64/jogl-all-noawt-natives-windows-amd64.jar

# Installation info: binaries can be found in:
# https://sourceforge.net/projects/qtjambi/files/4.8.7/qtjambi-community-4.8.7-win64-msvc2013.zip
CLASSPATH_QTJ4=\
lib_bindings/qtjambi/win/qtjambi-4.8.7.jar\
;lib_bindings/qtjambi/win/qtjambi-native-win64-msvc2013x64-4.8.7.jar

# Installation info: "jna.jar" can be found in "dist" of
# https://github.com/java-native-access/jna/archive/4.5.0.zip
CLASSPATH_ALGR5=lib_bindings/jna_4_5_0/jna.jar

# Installation info: "jna.jar" can be found in "dist" of
# https://github.com/java-native-access/jna/archive/4.5.0.zip
CLASSPATH_SDL2=lib_bindings/jna_4_5_0/jna.jar

#
# JVM args for specific libraries.
#

# Can be useful if JavaFX is not in your JDK.
JVM_ARGS_JFX=

JVM_ARGS_SWT=

JVM_ARGS_LWJGL3=

JVM_ARGS_JOGL=

JVM_ARGS_QTJ4=

# Installation info:
# - extract "allegro_monolith-5.2.dll" (in "bin") of
#   https://github.com/liballeg/allegro5/releases/download/5.2.2.0/allegro-mingw-gcc6.2.0-x64-dynamic-5.2.2.zip
# - put it in the directory indicated after "-Djna.library.path=".
# Allegro uses UTF-8 by default, not the default encoding of the system.
JVM_ARGS_ALGR5=-Djna.encoding=UTF-8 -Djna.library.path=lib_bindings/allegro_5_2_2_0/win

# Installation info:
# - binaries can be found in:
#   - https://www.libsdl.org/release/SDL2-2.0.5-win32-x64.zip
#   - https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.14-win32-x64.zip
#   - https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.1-win32-x64.zip
# - put them in the directory indicated after "-Djna.library.path="
#   (some libraries (such as zlib1.dll) can appear more than once: just pick one).
JVM_ARGS_SDL2=-Djna.library.path=lib_bindings/sdl2_synthesis/win

#
# For forced load on initialization.
# With ";" separator.
#

# TODO sdl For some reason, on Windows, now need to load (all) DLL's "by hand"
# with System.load(...), else, in spite of IMG_Init(...) having being called
# with proper flags and without error, I get the following error when trying
# to load a jpg image (but no issue for bmp or png):
# "Failed loading libjpeg-9.dll: The specified module could not be found.".
TO_LOAD_SDL2=\
lib_bindings/sdl2_synthesis/win/zlib1.dll\
;lib_bindings/sdl2_synthesis/win/libfreetype-6.dll\
;lib_bindings/sdl2_synthesis/win/libwebp-4.dll\
;lib_bindings/sdl2_synthesis/win/libpng16-16.dll\
;lib_bindings/sdl2_synthesis/win/libjpeg-9.dll\
;lib_bindings/sdl2_synthesis/win/libtiff-5.dll\
;lib_bindings/sdl2_synthesis/win/SDL2.dll\
;lib_bindings/sdl2_synthesis/win/SDL2_ttf.dll\
;lib_bindings/sdl2_synthesis/win/SDL2_image.dll

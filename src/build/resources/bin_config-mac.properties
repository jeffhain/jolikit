#
# Config used for Mac OS.
#

JAVA_PATH=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/bin/java

# Directory where classes (or jars) of this project,
# automatically compiled (typically by an IDE),
# can be found.
# We prefer to use automatic compilation from an IDE,
# than the overhead of ensuring a fresh compilation
# before each test or sample launch.
AUTO_COMP_DIR_PATH=ideclasses

#
# Common classpath.
# With ";" separator (really, whatever the OS).
#

# Jadecy (https://github.com/jeffhain/jadecy, v2.0)
# and JUnit (https://mvnrepository.com/artifact/junit/junit/3.8.1)
# needed for build and tests.
CLASSPATH_COMMON=\
lib/jadecy.jar\
;lib/junit.jar

#
# Classpaths for specific libraries.
# With ";" separator (really, whatever the OS).
#

# Can be useful if JavaFX is not in your JDK.
CLASSPATH_JFX=

# Installation info: binaries can be found in:
# http://download.eclipse.org/eclipse/downloads/drops4/R-4.7-201706120950/download.php?dropFile=swt-4.7-cocoa-macosx-x86_64.zip
# (for Mac OS X 10.10.5 (Yosemite) or higher)
CLASSPATH_SWT=lib_bindings/swt_4_7/mac/swt.jar

# Installation info: binaries can be found in:
# https://github.com/LWJGL/lwjgl3/releases/download/3.1.2/lwjgl-3.1.2.zip
# jemalloc is not mandatory, but LWJGL devs like to use jemalloc.
CLASSPATH_LWJGL3=\
lib_bindings/lwjgl_3_1_2_b29/main/lwjgl.jar\
;lib_bindings/lwjgl_3_1_2_b29/main/lwjgl-natives-macos.jar\
;lib_bindings/lwjgl_3_1_2_b29/glfw/lwjgl-glfw.jar\
;lib_bindings/lwjgl_3_1_2_b29/glfw/lwjgl-glfw-natives-macos.jar\
;lib_bindings/lwjgl_3_1_2_b29/opengl/lwjgl-opengl.jar\
;lib_bindings/lwjgl_3_1_2_b29/opengl/lwjgl-opengl-natives-macos.jar\
;lib_bindings/lwjgl_3_1_2_b29/stb/lwjgl-stb.jar\
;lib_bindings/lwjgl_3_1_2_b29/stb/lwjgl-stb-natives-macos.jar\
;lib_bindings/lwjgl_3_1_2_b29/jemalloc/lwjgl-jemalloc.jar\
;lib_bindings/lwjgl_3_1_2_b29/jemalloc/lwjgl-jemalloc-natives-macos.jar

# Installation info: binaries can be found in:
# - https://jogamp.org/deployment/autobuilds/master/gluegen-b903-903/gluegen-2.4-b903-20151116-macosx-universal.7z
#   (for gluegen)
# - https://jogamp.org/deployment/autobuilds/master/jogl-b1473-1473/jogl-2.4-b1473-20151117-macosx-universal.7z
#   (for jogl)
CLASSPATH_JOGL=\
lib_bindings/gluegen_2_4_b903/mac/gluegen-rt.jar\
;lib_bindings/gluegen_2_4_b903/mac/gluegen-rt-natives-macosx-universal.jar\
;lib_bindings/jogl_2_4_b1473/mac/jogl-all-noawt.jar\
;lib_bindings/jogl_2_4_b1473/mac/jogl-all-noawt-natives-macosx-universal.jar

# Installation info: binaries can be found in:
# https://sourceforge.net/projects/qtjambi/files/4.8.6/qtjambi-macosx-community-4.8.6.tar.gz
CLASSPATH_QTJ4=\
lib_bindings/qtjambi/mac/qtjambi-4.8.6.jar\
;lib_bindings/qtjambi/mac/qtjambi-native-macosx-gcc-4.8.6.jar

# Installation info: "jna.jar" can be found in "dist" of
# https://github.com/java-native-access/jna/archive/4.5.0.zip
CLASSPATH_ALGR5=lib_bindings/jna_4_5_0/jna.jar

# Installation info: "jna.jar" can be found in "dist" of
# https://github.com/java-native-access/jna/archive/4.5.0.zip
CLASSPATH_SDL2=lib_bindings/jna_4_5_0/jna.jar

#
# JVM args for specific libraries.
#

# Can be useful if JavaFX is not in your JDK.
JVM_ARGS_JFX=

# Useful to avoid this:
# "***WARNING: Display must be created on main thread due to Cocoa restrictions.
# Exception in thread "main" org.eclipse.swt.SWTException: Invalid thread access
#     at org.eclipse.swt.SWT.error(Unknown Source)
#     at org.eclipse.swt.SWT.error(Unknown Source)
#     at org.eclipse.swt.SWT.error(Unknown Source)
#     at org.eclipse.swt.widgets.Display.error(Unknown Source)
#     at org.eclipse.swt.widgets.Display.createDisplay(Unknown Source)
#     at org.eclipse.swt.widgets.Display.create(Unknown Source)
#     at org.eclipse.swt.graphics.Device.<init>(Unknown Source)
#     at org.eclipse.swt.widgets.Display.<init>(Unknown Source)
#     at org.eclipse.swt.widgets.Display.<init>(Unknown Source)
#     at net.jolikit.bwd.impl.swt.SwtBwdBinding.<init>(SwtBwdBinding.java:99)"
JVM_ARGS_SWT=-XstartOnFirstThread

# Useful to avoid this:
# "Exception in thread "main" java.lang.ExceptionInInitializerError
#     at org.lwjgl.glfw.GLFW.glfwShowWindow(GLFW.java:2015)
#     at net.jolikit.bwd.impl.lwjgl3.LwjglBwdHost.showInternal(LwjglBwdHost.java:656)
#     at net.jolikit.bwd.impl.utils.AbstractBwdHost.show(AbstractBwdHost.java:384)
#     at net.jolikit.bwt.test.misc.mains.AaaBwtTestMainUtils.launchTest(AaaBwtTestMainUtils.java:125)
#     at net.jolikit.bwt.test.misc.mains.Lwjgl3BoundMain.main(Lwjgl3BoundMain.java:100)
# Caused by: java.lang.IllegalStateException: Please run the JVM with -XstartOnFirstThread and make sure a window toolkit other than GLFW (e.g. AWT or JavaFX) is not initialized.
#     at org.lwjgl.glfw.EventLoop$OnScreen.<clinit>(EventLoop.java:63)
#     ... 5 more"
JVM_ARGS_LWJGL3=-XstartOnFirstThread

JVM_ARGS_JOGL=

# Useful to avoid this:
# "WARNING!!
# Qt Jambi does not appear to be running on the main thread and will most likely be unstable and crash.
# Please make sure to launch your 'java' command with the '-XstartOnFirstThread' command line option."
JVM_ARGS_QTJ4=-XstartOnFirstThread

# Installation info:
# - install Homebrew (cf. https://github.com/Homebrew/install):
#   - /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
# - install Allegro 5:
#   - brew install allegro
#     ===> installs allegro .dylib files in
#          /usr/local/Cellar/allegro/5.2.2/lib,
#          and its dependencies nearby that.
# - indicate the installation directory after "-Djna.library.path=".
# Allegro5 uses UTF-8 by default, not the default encoding of the system.
JVM_ARGS_ALGR5=-Djna.encoding=UTF-8 -Djna.library.path=/usr/local/Cellar/allegro/5.2.2/lib

# Installation info:
# - binaries can be found in:
#   - https://www.libsdl.org/release/SDL2-2.0.5.dmg
#   - https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.14.dmg
#   - https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.1.dmg
# - put them in the directory indicated after "-Djna.library.path=",
#   or do like me and just don't, because for some reason on my Mac
#   SDL2 binaries seem visible by default.
JVM_ARGS_SDL2=

#
# For forced load on initialization.
# With ";" separator.
#

# Don't seem to need to load library by hand
# as for Windows.
TO_LOAD_SDL2=

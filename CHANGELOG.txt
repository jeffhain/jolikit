################################################################################
Jolikit X.X, XXXX/XX/XX

- Corrected a bug in HardScheduler, where workers were not being woken up
  after schedules removals due to cancellations (cancelPendingAsapSchedules(),
  cancelPendingTimedSchedules()) or drains (drainPendingAsapRunnablesInto(...),
  drainPendingTimedRunnablesInto(...)).
  This could cause shutdownNow(...) (which calls drain methods) to let worker
  threads wait, instead of figuring out shutdown state and die.
  Possible workarounds were to call interruptWorkers() after shutdownNow(...),
  or to call stopAccepting() and then drain or cancellation methods before
  calling shutdownNow(...).

- NumbersUtils:
  - Renamed NumbersUtils into NbrsUtils
    (low level and used a lot, so a short name is better).
  - Renamed checkIsInRangeXxx() methods into checkInRangeXxx(),
    for consistency with new requireInRange() methods
    (themselves consistent with requireNonNull()).
  - For int/long/float/double primitive types, added methods:
    - requireInRange(min,max,value,name)
      NB: Not deprecating/removing similar checkInRange() methods,
          as they have their use case in assert(),
          even though we no longer code like that.
    - requireSupOrEq(min,value,name)
    - requireSup(min,value,name)
    - requireInfOrEq(max,value,name)
    - requireInf(max,value,name)
    and used them where appropriate.
  - Added toStringHex(byte/short/int/long) methods,
    with same semantics as Argb32.toString(int) and Argb64.toString(long)
    but now a faster implementation.

- Added exceptions handling in finally blocks to avoid exceptions thrown
  from them to suppress exceptions thrown from the try block
  (cf. the new ExceptionsUtils class).

- Scheduling redesign:

  - Removed the over-engineering of InterfaceSchedulable and
    InterfaceScheduling interfaces, which allowed schedulers to indicate to
    runnables their theoretical and actual execution times, and allowed
    runnables to ask the scheduler for re-schedules without going through
    scheduler's regular (interface-implementing) executeXxx(...) methods.
    In schedulers implementations, it caused complexities which were unnecessary
    (since these features can easily be added on top of regular runnables),
    and it did not allow to intercept (internal) re-schedules by simply
    overriding executeAtNs(...) method.
    Also, this caused calls to clock.getTimeNs() for each runnable execution,
    even when there were only ASAP schedules, and added a useless per-schedule
    memory overhead for users not caring about execution times or re-schedules.

  - In HardScheduler, instead of giving priority to timed schedules over
    ASAP schedules, which could cause ASAP schedules to never be executed
    in case of bursts of timed schedules for current time (or in the past),
    implemented fairness by adding a sequence number for ASAP schedules.
    Now, if an ASAP schedule and a timed schedule which time has come
    are to be executed, the one with the smallest sequence number is
    executed first.
    Note that this was already the behavior of SoftScheduler,
    so now these schedulers behave consistently.
    Also, implemented "timed fairness": if two timed schedules
    that can currently be executed, the one that was submitted first
    will be executed first, regardless of their theoretical time.
    This is done to avoid recent schedules for times far in the past
    to postpone (potentially forever) execution of older schedules
    for more recent times inferior to current time.

  - Renamed AbstractSmartSchedulable into AbstractRepeatableRunnable,
    AbstractTask into AbstractRepeatableTask, and AbstractRepeatedProcess into
    AbstractProcess, and updated their javadoc to describe how they are related.
    For each of them, re-schedules are now done through a protected method that
    can be overridden, which allows for custom (and even unlawful) re-scheduling
    logics.
    For AbstractRepeatableRunnable and AbstractRepeatableTask instances,
    the theoretical time for a first timed schedule (when the state is pending)
    has now to be set (with setNextTheoreticalTimeNs(...)) before submitting
    to the scheduler, since it's no longer computed by the scheduler.
    If it's not set, it will be equal to actual time (which is fine for ASAP
    schedules, or if you don't care about it).

- BWD API:
  - Additions:
    - Argb32.toOpaque(int), Argb64.toOpaque(long).
    - GRect.xMidFp() and yMidFp().
    - GRect.minSpan() and maxSpan().
    - GRect.area() and areaLong().
    - GRect.withBordersDeltasElseEmpty(int,int,int,int).
    - GRect.overlaps(int,int,int,int).
    - GRotation.areHorVerFlipped().
    - GTransform.areHorVerFlipped().
    - InterfaceBwdGraphics.newChildGraphics(GRect,GRect).
    - InterfaceBwdGraphics.reset().
    - InterfaceBwdGraphics.isClipEmpty().
    - InterfaceBwdGraphics.drawPolyline().
    - InterfaceBwdGraphics.drawPolygon().
    - InterfaceBwdGraphics.fillPolygon().
    - InterfaceBwdImage.getRect().
    - InterfaceBwdWritableImage class.
    - InterfaceBwdFontHome.newFontXxx() methods that always use
      default font kind (no font kind argument).
    - InterfaceBwdBinding.getMousePosInScreen().
    - InterfaceBwdBinding.newWritableImage(int,int).
    - AbstractBwdClient class.
    - BwdKeyEventPr.isRepeat().
  - Modifications:
    - Now requiring repetition of key pressed events,
      in addition to key typed events.
    - InterfaceBwdFont, InterfaceBwdFontMetrics,
      BwdFontId, BwdFontKind: removed "font" prefix
      from getters names, for shorter code, and because
      code is still clear that way and methods easily
      discoverable (not many of them).
    - Bindings must now call client's paintClient() method
      within calls to graphics init() and finish(),
      so that clients don't have to bother with these
      (NB: this is a backward-compatible change, since calling
      init() and finish() multiple times is allowed).
    - To allows for use of graphics for writable (offscreen) images,
      "base clip" is now referred to as "initial clip",
      and "client area/coordinates" as "base area/coordinates"
      when they could correspond to the box of a writable image.
      Also removed "opaque" from clear methods name,
      to allow for non-opaque clearing in case of writable images.
    - InterfaceBwdGraphics:
      - getBoxInClient() renamed into getBox().
      - getBaseClipInClient() renamed into getInitialClipInBase().
      - getBaseClipInUser() renamed into getInitialClipInUser().
      - getClipInClient() renamed into getClipInBase().
      - addClipInClient() renamed into addClipInBase().
      - clearRectOpaque() renamed into clearRect().
      - drawLineStipple(): specified that when the pattern is plain,
        the returned pixel num must be the specified one (which was
        inconsistently done or not by implementations).
    - InterfaceBwdBinding:
      - isConcurrentFontCreationAndDisposalSupported()
        renamed into
        isConcurrentFontManagementSupported()
      - isConcurrentImageCreationAndDisposalSupported()
        split into
        isConcurrentImageFromFileManagementSupported()
        and
        isConcurrentWritableImageManagementSupported()
  - BwdWheelEvent/WHEEL_ROLLED: indicated that xRoll() and yRoll()
    must not be both zero.
  - InterfaceBwdFont: added spec for hashCode() and equals(Object).
  
- BWD EXTENSION:
  - Created bwd.ext package, for extensions based on BWD API
    that can be useful for BWD tests and toolkits based on BWD,
    and moved InterfaceHostSupplier and drag utilities package
    from bwd.impl to there.

- BWD IMPLS:
  - BaseBwdBindingConfig :
    - parallelizerParallelism set to 1 by default, instead of
      to available parallelism, for multi-threading not to hurt
      incognizant users.
    - Reduced default delay and period for key repetition.
    - Added "scale" parameter, which allows for scaling BWD pixels
      span (and related coordinates) as a multiple of OS pixels span
      (scale = 2 means a BWD pixel is 2x2 Os pixels).
      Useful to not consume too much CPU when painting large clients
      on 4k+ screens, or to easily scale up a UI without having
      to touch its code, or to check pixel-perfectness of your drawings
      without a magnifying glass, or if you just like pixelated graphics.
  - Corrections:
    - Corrected an issue in DefaultLineDrawer, where pixels out of clip
      could be drawn when coordinates were huge (>= 500_000_000 or so).
    - JavaFX, SWT and Qt bindings graphics could not be used in an
      interleaved manner (due to shared data not being properly updated).
    - Some graphics could not properly handle boxes with negative
      top-left corner coordinates.
  - Optimizations/upgrades:
    - Factored/upgraded/optimized/simplified various internal utilities,
      in particular:
      BufferedImageHelper and other graphics buffer related classes,
      snapshot utilities for JavaFX, OpenGL and pixel formats methods
      in BindingColorUtils and PixelFormatHelper.
      Related functional upgrades: smaller and shrinkable graphic buffers,
      more pixel formats should be supported by Qtj4 binding,
      and worked around an origin drift/offset issue in JavaFX
      when drawing huge figures.
    - Optimized BWD bindings graphics creations and init,
      and added BenchNewChildGBwdTestCase.
    - Graphics: minimized color setting overhead, especially
      for setArgb32(), by computing backing and/or associated
      64 bits and opaque colors when needed (lazily).
      Also added an argb32 field in BwdColor, to make
      BwdColor.toArgb32() much faster.
    - Optimized mid point algorithm used for non-huge arcs,
      by checking clip (fast) before angular range.
    - Huge speed-up (i.e. was really slow) for ovals and arcs drawing,
      arcs filling, and to a lesser extent ovals filling, when spans are
      not small, by using an algorithm based on polylines and polygons,
      instead of the pixel-per-pixel brute force algorithm.
    - Optimized text drawing, by only considering the clipped bounding box
      (Allegro5, SDL2, SWT), or by drawing directly on the backing int array
      through a BufferedImage graphics (JOGL, LWJGL3).
    - AwtEventConverter:
      - guards against spurious wheel events on Mac.
      - Now using getPreciseWheelRotation() only if available,
        and best effort workaround against getWheelRotation() sometimes
        returning zero on wheel roll direction change (on Windows at least).
    - AbstractBwdBinding: For the Executor backing the parallelizer,
      now using a HardScheduler instead of a ThreadPoolExecutor,
      to avoid spurious shutdown issues under stress.
  - Internals:
    - Moved file loading into image constructor for the few bindings
      for which that was not the case.
    - In AbstractBwdHost, runWindowEventLogicLoopOnPeriod(..) visibility was
      changed from package-private to protected.
    - In AbstractBwdBinding, renamed onClosedEventFiringImpl(...) into
      onHostClosedEventFiringImpl(...).
    - Before adding writable images and new related image
      and graphics classes, renamed a few classes:
      - XxxBwdImage into XxxBwdImageFromFile.
      - AwtBwdGraphics into AwtBwdGraphicsWithG.
      - JfxBwdGraphics into JfxBwdGraphicsWithGc.

- Repeated processes : taking care not to schedule (too much)
  in the past when using theoretical date as reference, to avoid
  indefinite lateness growth, which can cause other repetitions
  to be postponed and overbusiness once we can keep up again.

- Moved OsUtils from BWD impls to net.jolikit.lang package
  (was used from other places than BWD impls,
  and could be used anywhere).

- Added finals for Java 7 (or less) source compatibility.

- Comments/internals : now using "interrupt status" instead of
  "interruption status", and related changes.

- Obsolete comments, log and tests upgrades in net.jolikit.time.sched packages.

################################################################################
Jolikit 0.1, 2019/05/22
################################################################################
